# interpreter for shell commands
set shell sh
set icons true
set hidden true
set ignorecase true
set period 1
set autoquit true

set sixel true
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id 
&ctpvquit $id

set drawbox true

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane

# use enter for shell commands

# show the result of execution of previous commands

# execute current file (must be executable)

# dedicated keys for file opener actions

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir ${{
    printf "Directory Name: "
    read ans
    mkdir $ans
}}

cmd touch ${{
    printf "File Name:"
    read ans
    touch $ans
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)

cmd mv ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd cp ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd rm ${{
    set -f
    printf "$fx\n"
    printf "delete? [y/n]: "
    read ans
    [ "$ans" = "y" ] && trash-put $fx
}}

cmd chmod ${{
    printf "Mode Bits: "
    read ans
    for file in "$fx" do
        chmod $ans $file
    done
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.osz) unzip $f;;
        *.osk) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# # exa
# cmd on-select &{{
#     lf -remote "send $id set statfmt \"$(eza -ld --icons --color=always "$f")\""
# }}

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map f :fzf_search

cmd wp %rm ~/Pictures/wallpaper ; ln -s $f ~/Pictures/wallpaper ; killall hyprpaper ; hyprctl dispatch exec hyprpaper

map <enter> shell
map ` !true

map s $ripdrag ./*
map x $$f
map X !$f
map o $mimeopen $f
map O $mimeopen --ask $f

map gh cd ~                             # [h]ome
map g~ cd ~                             # [~]
map g/ cd /                             # [/]
map gc cd ~/.config                     # [c]onfig
map gf cd ~/dotfiles                    # dot[f]iles
map gd cd ~/Downloads                   # [d]ownloads
map gD cd ~/Documents                   # [d]ocuments
map gp cd ~/Projects                    # [p]rojects
map gi cd ~/Pictures                    # [i]mages / p[i]ctures
map gs cd ~/Pictures/screenshots        # [s]creenshots
map gv cd ~/Videos                      # [v]ideos
map gm cd /run/media/m4rti              # [m]ount / [m]edia
map gt cd ~/.local/share/Trash/files    # [t]rash
map gn cd ~/Nextcloud                   # [n]extcloud
map gN cd ~/Nextcloud/Notes             # [N]notes
map gw cd ~/Nextcloud/Wallpapers        # [w]allpapers
map gu cd ~/Nextcloud/Documents/UOC     # [u]oc
map go cd ~/Games/osu!                  # [o]su!
map ga cd ~/.local/share/applications   # [a]pplications
map gA cd ~/.local/share/flatpak/exports/share/applications # flatpak [A]pplications
